# -*- coding: utf-8 -*-
"""T8_P &  S_3001220020_Thifal Hasna Aulia Habibah.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UsLpGE-4HTNHioq3ACpZhQpLlUesoPyL
"""

# Parameter untuk MRNG
a = 19       # Multiplier
c = 5        # Increment
m = 100      # Modulus
n = 20       # Jumlah soal yang diacak
Z0 = 42      # Seed (bilangan awal)

"""**Penjelasan Program**:


*   Multiplier (a=19): Pengali yang digunakan dalam rumus MRNG


*   Increment (c=5): Nilai penambah setelah perkalian


*  Modulus (m=100): Pembagi untuk mendapatkan sisa hasil bagi


*  n=20: Menentukan berapa banyak bilangan acak yang akan dibangkitkan


*  Z0=42: Nilai awal yang digunakan sebagai pemicu pembangkitan
"""

# Inisialisasi daftar untuk menyimpan hasil
results = []

"""**Penjelsan Prograam**:

*   Baris ini mendeklarasikan sebuah list kosong bernama results.
*   List ini nantinya akan digunakan untuk menyimpan semua data hasil perhitungan dari algoritma random number generator (RNG) di setiap iterasi.


"""

Z = Z0  # Bilangan awal
for i in range(1, n + 1):
    Z_prev = Z  # Menyimpan bilangan sebelumnya
    Z = (a * Z + c) % m  # Menghitung bilangan acak selanjutnya
    U = Z / m  # Menghitung bilangan acak seragam
    rumus = f"(19 * {Z_prev} + 5) mod 100"  # Rumus yang digunakan
    results.append([i, Z_prev, rumus, Z, round(U, 3)])  # Menyimpan hasil

"""**Penjelasasn Program**:


1.  Looping: Program melakukan iterasi dari 1 hingga n (jumlah soal yang diacak).

2. Z_prev: Menyimpan nilai bilangan acak sebelumnya untuk referensi.

3. Rumus Pengacakan: Menghitung nilai baru Z menggunakan rumus MRNG:

                          Z_(i+1)=(a.Z_i+C)mod m

4. U: Menghitung bilangan acak seragam dengan membagi Z dengan m. Ini mengubah nilai Z menjadi rentang [0,1].

5. Menyimpan Hasil: Setiap hasil dari iterasi disimpan dalam daftar results, termasuk:
* Iterasi ke-i (i)
* Bilangan sebelumnya (Z_prev)
* Rumus yang digunakan untuk menghitung Z
* Bilangan acak saat ini (Z)
* Bilangan acak seragam (U), dibulatkan hingga tiga desimal.
"""

# Menampilkan tabel
print(f"{'i':<3} | {'Zi-1 (Bilangan Sebelumnya)':<28} | {'Rumus Zi = (19.Zi-1 + 5) mod 100':<40} | {'Zi (Bilangan Acak)':<20} | {'Ui = Zi/100 (Bilangan Acak Seragam)':<30}")
print("-" * 130)
for row in results:
    print(f"{row[0]:<3} | {row[1]:<28} | {row[2]:<40} | {row[3]:<20} | {row[4]:<30}")

"""**Penjelasan Program**:
* Program mencetak header tabel dengan format tertentu agar mudah dibaca.

* Looping kedua digunakan untuk mencetak setiap baris hasil dari daftar results, menampilkan semua informasi yang telah dikumpulkan selama proses pengacak
"""

# Memvisualisasikan hasil
plt.figure(figsize=(10, 6))
plt.plot([row[0] for row in results], [row[4] for row in results], 'bo-')
plt.xlabel('Iterasi ke-i')
plt.ylabel('Ui (Bilangan Acak Seragam)')
plt.title('Visualisasi Bilangan Acak Seragam')
plt.grid(True)
plt.show()

"""**Penjelasan Program**:
* Visualisasi: Menggunakan matplotlib untuk membuat grafik dari bilangan acak seragam (U) terhadap iterasi ke-i.

* Grafik ini memberikan gambaran visual tentang bagaimana nilai bilangan acak seragam berubah seiring dengan bertambahnya iterasi.**teks tebal**
"""